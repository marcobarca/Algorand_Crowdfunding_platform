{"ast":null,"code":"async function getUnsignedTxn(creatorAddress, goal, durationInSeconds) {\n  const response = await fetch('/api/createApp?creator=' + creatorAddress + \"&goal=\" + goal + \"&duration=\" + durationInSeconds);\n  const responseBody = await response.json();\n  if (response.ok) {\n    return responseBody;\n  } else throw responseBody;\n}\nfunction createGame(game) {\n  return new Promise((resolve, reject) => {\n    fetch('/api/games', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: game.username,\n        score: game.score\n      })\n    }).then(response => {\n      if (response.ok) {\n        resolve(null);\n      } else {\n        response.json().then(message => {\n          reject(message);\n        }).catch(() => {\n          reject({\n            error: 'Cannot parse server response'\n          });\n        });\n      }\n    }).catch(() => {\n      reject({\n        error: 'Cannot communicate with the server'\n      });\n    });\n  });\n}\nexport default getUnsignedTxn;","map":{"version":3,"names":["getUnsignedTxn","creatorAddress","goal","durationInSeconds","response","fetch","responseBody","json","ok","createGame","game","Promise","resolve","reject","method","headers","body","JSON","stringify","username","score","then","message","catch","error"],"sources":["/Users/marco/Desktop/crowdfunding_platform/client/src/APIs/API.js"],"sourcesContent":["async function getUnsignedTxn(creatorAddress, goal, durationInSeconds) {\n    const response = await fetch('/api/createApp?creator=' + creatorAddress + \"&goal=\" + goal + \"&duration=\" + durationInSeconds);\n    const responseBody = await response.json();\n    if (response.ok) {\n      return responseBody;\n    }\n    else\n      throw responseBody;\n  }\n\n  function createGame(game) {\n    return new Promise((resolve, reject) => {\n      fetch('/api/games', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username: game.username, score: game.score }),\n      }).then((response) => {\n        if (response.ok) {\n          resolve(null);\n        } else {\n          response.json()\n            .then((message) => { reject(message); })\n            .catch(() => { reject({ error: 'Cannot parse server response' }) });\n        }\n      }).catch(() => { reject({ error: 'Cannot communicate with the server' }) });\n    });\n  }\n\n  export default getUnsignedTxn;"],"mappings":"AAAA,eAAeA,cAAc,CAACC,cAAc,EAAEC,IAAI,EAAEC,iBAAiB,EAAE;EACnE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yBAAyB,GAAGJ,cAAc,GAAG,QAAQ,GAAGC,IAAI,GAAG,YAAY,GAAGC,iBAAiB,CAAC;EAC7H,MAAMG,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;EAC1C,IAAIH,QAAQ,CAACI,EAAE,EAAE;IACf,OAAOF,YAAY;EACrB,CAAC,MAEC,MAAMA,YAAY;AACtB;AAEA,SAASG,UAAU,CAACC,IAAI,EAAE;EACxB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCR,KAAK,CAAC,YAAY,EAAE;MAClBS,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,QAAQ,EAAET,IAAI,CAACS,QAAQ;QAAEC,KAAK,EAAEV,IAAI,CAACU;MAAM,CAAC;IACrE,CAAC,CAAC,CAACC,IAAI,CAAEjB,QAAQ,IAAK;MACpB,IAAIA,QAAQ,CAACI,EAAE,EAAE;QACfI,OAAO,CAAC,IAAI,CAAC;MACf,CAAC,MAAM;QACLR,QAAQ,CAACG,IAAI,EAAE,CACZc,IAAI,CAAEC,OAAO,IAAK;UAAET,MAAM,CAACS,OAAO,CAAC;QAAE,CAAC,CAAC,CACvCC,KAAK,CAAC,MAAM;UAAEV,MAAM,CAAC;YAAEW,KAAK,EAAE;UAA+B,CAAC,CAAC;QAAC,CAAC,CAAC;MACvE;IACF,CAAC,CAAC,CAACD,KAAK,CAAC,MAAM;MAAEV,MAAM,CAAC;QAAEW,KAAK,EAAE;MAAqC,CAAC,CAAC;IAAC,CAAC,CAAC;EAC7E,CAAC,CAAC;AACJ;AAEA,eAAexB,cAAc"},"metadata":{},"sourceType":"module"}