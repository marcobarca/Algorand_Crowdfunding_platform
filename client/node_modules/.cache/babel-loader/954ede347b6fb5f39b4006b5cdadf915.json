{"ast":null,"code":"export async function signTransaction(txn) {\n  // TODO = improve this\n  let txn_array = new Array();\n  let i = 0;\n  while (txn[i] != undefined) {\n    txn_array.push(txn[i]);\n    i++;\n  }\n  let txn_uint8 = new Uint8Array(txn_array);\n\n  /*global AlgoSigner*/\n  // Use the AlgoSigner encoding library to make the transactions base64\n  const txn_b64 = await AlgoSigner.encoding.msgpackToBase64(txn_uint8);\n\n  // Sign the transaction\n  let signed_txn = await AlgoSigner.signTxn([{\n    txn: txn_b64\n  }]);\n\n  // Get the base64 encoded signed transaction and convert it to binary\n  let binary_signed_txn = await AlgoSigner.encoding.base64ToMsgpack(signed_txn[0].blob);\n\n  // ----------------------------\n\n  const drr = await algosdk.createDryrun({\n    client: client,\n    txns: [algosdk.decodeSignedTransaction(signed_txn['blob'])]\n  });\n  const filename = 'dryrun.msgp';\n  fs.writeFileSync(filename, algosdk.encodeObj(drr.get_obj_for_encoding(true)));\n  console.log(\"CREATEEEEEEDDDDD\");\n  // ----------------------------\n\n  console.log(binary_signed_txn);\n  return binary_signed_txn;\n}","map":{"version":3,"names":["signTransaction","txn","txn_array","Array","i","undefined","push","txn_uint8","Uint8Array","txn_b64","AlgoSigner","encoding","msgpackToBase64","signed_txn","signTxn","binary_signed_txn","base64ToMsgpack","blob","drr","algosdk","createDryrun","client","txns","decodeSignedTransaction","filename","fs","writeFileSync","encodeObj","get_obj_for_encoding","console","log"],"sources":["/Users/marco/Desktop/crowdfunfing_project/client/src/Utils/AlgoSignerOperations.js"],"sourcesContent":["\nexport async function signTransaction(txn) {\n\n    // TODO = improve this\n    let txn_array = new Array();\n\n    let i = 0;\n    while (txn[i] != undefined) {\n        txn_array.push(txn[i]);\n        i++;\n    }\n\n    let txn_uint8 = new Uint8Array(txn_array);\n\n    /*global AlgoSigner*/\n    // Use the AlgoSigner encoding library to make the transactions base64\n    const txn_b64 = await AlgoSigner.encoding.msgpackToBase64(txn_uint8);\n\n    // Sign the transaction\n    let signed_txn = await AlgoSigner.signTxn([{ txn: txn_b64 }]);\n\n    // Get the base64 encoded signed transaction and convert it to binary\n    let binary_signed_txn = await AlgoSigner.encoding.base64ToMsgpack(\n        signed_txn[0].blob\n    );\n\n        // ----------------------------\n\n        const drr = await algosdk.createDryrun({\n            client: client, \n            txns: [\n                algosdk.decodeSignedTransaction(signed_txn['blob']),\n            ]\n        })\n        \n        const filename = 'dryrun.msgp'\n        fs.writeFileSync(filename, algosdk.encodeObj(drr.get_obj_for_encoding(true)))\n    \n        console.log(\"CREATEEEEEEDDDDD\")\n        // ----------------------------\n    \n\n    console.log(binary_signed_txn)\n\n    return binary_signed_txn\n}\n"],"mappings":"AACA,OAAO,eAAeA,eAAe,CAACC,GAAG,EAAE;EAEvC;EACA,IAAIC,SAAS,GAAG,IAAIC,KAAK,EAAE;EAE3B,IAAIC,CAAC,GAAG,CAAC;EACT,OAAOH,GAAG,CAACG,CAAC,CAAC,IAAIC,SAAS,EAAE;IACxBH,SAAS,CAACI,IAAI,CAACL,GAAG,CAACG,CAAC,CAAC,CAAC;IACtBA,CAAC,EAAE;EACP;EAEA,IAAIG,SAAS,GAAG,IAAIC,UAAU,CAACN,SAAS,CAAC;;EAEzC;EACA;EACA,MAAMO,OAAO,GAAG,MAAMC,UAAU,CAACC,QAAQ,CAACC,eAAe,CAACL,SAAS,CAAC;;EAEpE;EACA,IAAIM,UAAU,GAAG,MAAMH,UAAU,CAACI,OAAO,CAAC,CAAC;IAAEb,GAAG,EAAEQ;EAAQ,CAAC,CAAC,CAAC;;EAE7D;EACA,IAAIM,iBAAiB,GAAG,MAAML,UAAU,CAACC,QAAQ,CAACK,eAAe,CAC7DH,UAAU,CAAC,CAAC,CAAC,CAACI,IAAI,CACrB;;EAEG;;EAEA,MAAMC,GAAG,GAAG,MAAMC,OAAO,CAACC,YAAY,CAAC;IACnCC,MAAM,EAAEA,MAAM;IACdC,IAAI,EAAE,CACFH,OAAO,CAACI,uBAAuB,CAACV,UAAU,CAAC,MAAM,CAAC,CAAC;EAE3D,CAAC,CAAC;EAEF,MAAMW,QAAQ,GAAG,aAAa;EAC9BC,EAAE,CAACC,aAAa,CAACF,QAAQ,EAAEL,OAAO,CAACQ,SAAS,CAACT,GAAG,CAACU,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC;EAE7EC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EAC/B;;EAGJD,OAAO,CAACC,GAAG,CAACf,iBAAiB,CAAC;EAE9B,OAAOA,iBAAiB;AAC5B"},"metadata":{},"sourceType":"module"}