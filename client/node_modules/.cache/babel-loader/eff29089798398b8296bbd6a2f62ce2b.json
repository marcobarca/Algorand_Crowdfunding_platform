{"ast":null,"code":"export async function getUnsignedTxn(creatorAddress, goal, startDate, endDate) {\n  const response = await fetch('/api/createApp?creator=' + creatorAddress + \"&goal=\" + goal + \"&startDate=\" + startDate + \"&endDate=\" + endDate);\n  const responseBody = await response.json();\n  if (response.ok) {\n    console.log(\"ResponseBody --------\" + responseBody);\n    return responseBody;\n  } else throw responseBody;\n}\n\n//FIXME = add token as first parameter\nexport function postSignedTxn(txnID, signed_txn) {\n  return new Promise((resolve, reject) => {\n    fetch('/api/createApp/Algorand', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        txnID: txnID,\n        signed_txn: signed_txn\n      })\n    }).then(response => {\n      if (response.ok) {\n        resolve(null);\n      } else {\n        response.json().then(message => {\n          reject(message);\n        }).catch(() => {\n          reject({\n            error: 'Cannot parse server response'\n          });\n        });\n      }\n    }).catch(() => {\n      reject({\n        error: 'Cannot communicate with the server'\n      });\n    });\n  });\n}","map":{"version":3,"names":["getUnsignedTxn","creatorAddress","goal","startDate","endDate","response","fetch","responseBody","json","ok","console","log","postSignedTxn","txnID","signed_txn","Promise","resolve","reject","method","headers","body","JSON","stringify","then","message","catch","error"],"sources":["/Users/marco/Desktop/crowdfunfing_project/client/src/APIs/API.js"],"sourcesContent":["export async function getUnsignedTxn(creatorAddress, goal, startDate, endDate) {\n    const response = await fetch('/api/createApp?creator=' + creatorAddress + \"&goal=\" + goal + \"&startDate=\" + startDate + \"&endDate=\" + endDate);\n    const responseBody = await response.json();\n    if (response.ok) {\n      console.log(\"ResponseBody --------\" + responseBody)\n      return responseBody;\n    }\n    else\n      throw responseBody;\n  }\n\n  //FIXME = add token as first parameter\n  export function postSignedTxn(txnID, signed_txn) {\n    return new Promise((resolve, reject) => {\n      fetch('/api/createApp/Algorand', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({txnID: txnID, signed_txn: signed_txn }),\n      }).then((response) => {\n        if (response.ok) {\n          resolve(null);\n        } else {\n          response.json()\n            .then((message) => { reject(message); })\n            .catch(() => { reject({ error: 'Cannot parse server response' }) });\n        }\n      }).catch(() => { reject({ error: 'Cannot communicate with the server' }) });\n    });\n  }\n"],"mappings":"AAAA,OAAO,eAAeA,cAAc,CAACC,cAAc,EAAEC,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAE;EAC3E,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yBAAyB,GAAGL,cAAc,GAAG,QAAQ,GAAGC,IAAI,GAAG,aAAa,GAAGC,SAAS,GAAG,WAAW,GAAGC,OAAO,CAAC;EAC9I,MAAMG,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;EAC1C,IAAIH,QAAQ,CAACI,EAAE,EAAE;IACfC,OAAO,CAACC,GAAG,CAAC,uBAAuB,GAAGJ,YAAY,CAAC;IACnD,OAAOA,YAAY;EACrB,CAAC,MAEC,MAAMA,YAAY;AACtB;;AAEA;AACA,OAAO,SAASK,aAAa,CAACC,KAAK,EAAEC,UAAU,EAAE;EAC/C,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCX,KAAK,CAAC,yBAAyB,EAAE;MAC/BY,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACT,KAAK,EAAEA,KAAK;QAAEC,UAAU,EAAEA;MAAW,CAAC;IAC9D,CAAC,CAAC,CAACS,IAAI,CAAElB,QAAQ,IAAK;MACpB,IAAIA,QAAQ,CAACI,EAAE,EAAE;QACfO,OAAO,CAAC,IAAI,CAAC;MACf,CAAC,MAAM;QACLX,QAAQ,CAACG,IAAI,EAAE,CACZe,IAAI,CAAEC,OAAO,IAAK;UAAEP,MAAM,CAACO,OAAO,CAAC;QAAE,CAAC,CAAC,CACvCC,KAAK,CAAC,MAAM;UAAER,MAAM,CAAC;YAAES,KAAK,EAAE;UAA+B,CAAC,CAAC;QAAC,CAAC,CAAC;MACvE;IACF,CAAC,CAAC,CAACD,KAAK,CAAC,MAAM;MAAER,MAAM,CAAC;QAAES,KAAK,EAAE;MAAqC,CAAC,CAAC;IAAC,CAAC,CAAC;EAC7E,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module"}