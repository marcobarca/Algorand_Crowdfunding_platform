{"ast":null,"code":"var _jsxFileName = \"/Users/marco/Desktop/crowdfunding_platform/client/src/Components/ProjectForm.js\";\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport { Col, Row } from 'react-bootstrap';\nimport getUnsignedTxn from '../APIs/API';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProjectForm() {\n  const handleSubmit = async event => {\n    // Stop the form from submitting and refreshing the page.\n    event.preventDefault();\n\n    // Get data from the form.\n    const data = {\n      creator: event.target.creator.value,\n      goal: event.target.goal.value,\n      start: event.target.duration.value\n    };\n    try {\n      let txn = await getUnsignedTxn(\"R3Z6A6BUXWRYZ3IFBSK7Y54EBN6FRBSYGS4GNTNE2DB5GXJAC64JOMNFNI\", data.goal, data.start);\n      var txn_ = Uint8Array.from(txn);\n      console.log(txn_);\n      return;\n\n      /*global AlgoSigner*/\n      // Use the AlgoSigner encoding library to make the transactions base64\n      const txn_b64 = await AlgoSigner.encoding.msgpackToBase64(txn);\n\n      // Sign the transaction\n      let signedTxs = await AlgoSigner.signTxn([{\n        txn: txn_b64\n      }]);\n      console.log(signedTxs);\n\n      // Get the base64 encoded signed transaction and convert it to binary\n      let binarySignedTx = await AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);\n      console.log(binarySignedTx);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Row, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-2\",\n          controlId: \"creator\",\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            placeholder: \"Enter creator\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-2\",\n          controlId: \"goal\",\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            placeholder: \"Enter goal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          controlId: \"duration\",\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            placeholder: \"Duration\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_c = ProjectForm;\nexport default ProjectForm;\nvar _c;\n$RefreshReg$(_c, \"ProjectForm\");","map":{"version":3,"names":["Button","Form","Col","Row","getUnsignedTxn","ProjectForm","handleSubmit","event","preventDefault","data","creator","target","value","goal","start","duration","txn","txn_","Uint8Array","from","console","log","txn_b64","AlgoSigner","encoding","msgpackToBase64","signedTxs","signTxn","binarySignedTx","base64ToMsgpack","blob","err"],"sources":["/Users/marco/Desktop/crowdfunding_platform/client/src/Components/ProjectForm.js"],"sourcesContent":["import Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport { Col, Row } from 'react-bootstrap';\nimport getUnsignedTxn from '../APIs/API';\n\nfunction ProjectForm() {\n\n    const handleSubmit = async (event) => {\n        // Stop the form from submitting and refreshing the page.\n        event.preventDefault()\n\n        // Get data from the form.\n        const data = {\n            creator: event.target.creator.value,\n            goal: event.target.goal.value,\n            start: event.target.duration.value,\n        }\n        try {\n\n            let txn = await getUnsignedTxn(\"R3Z6A6BUXWRYZ3IFBSK7Y54EBN6FRBSYGS4GNTNE2DB5GXJAC64JOMNFNI\", data.goal, data.start);\n\n            \n            var txn_ = Uint8Array.from(txn)\n            console.log(txn_)\n\n            return\n            \n            /*global AlgoSigner*/\n            // Use the AlgoSigner encoding library to make the transactions base64\n            const txn_b64 = await AlgoSigner.encoding.msgpackToBase64(txn);\n\n            // Sign the transaction\n            let signedTxs = await AlgoSigner.signTxn([{ txn: txn_b64 }]);\n            console.log(signedTxs);\n\n            // Get the base64 encoded signed transaction and convert it to binary\n            let binarySignedTx = await AlgoSigner.encoding.base64ToMsgpack(\n                signedTxs[0].blob\n            );\n\n            console.log(binarySignedTx)\n        } catch (err) {\n            console.log(err)\n        }\n\n    }\n\n\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Row />\n            <Row>\n                <Col />\n                <Col>\n                    <Form.Group className=\"mb-2\" controlId=\"creator\">\n                        <Form.Control placeholder=\"Enter creator\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-2\" controlId=\"goal\">\n                        <Form.Control placeholder=\"Enter goal\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\" controlId=\"duration\">\n                        <Form.Control placeholder=\"Duration\" />\n                    </Form.Group>\n                    <Button\n                        variant=\"primary\"\n                        type=\"submit\">\n                        Submit\n                    </Button>\n                </Col>\n                <Col />\n            </Row>\n            <Row />\n        </Form>\n    );\n}\n\nexport default ProjectForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}